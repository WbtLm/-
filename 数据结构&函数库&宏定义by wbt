typedef struct A		//节点的数据结构，distence包含了已经压缩了的邻接矩阵的结构 
{
	int x,y;
	char *ifo;
	int *distence;		//左下邻接矩阵 
}Data;
Data *nodeArr;			//与宏 DIS 配合
#include<string.h>
#include<stdio.h>
#include<windows.h>
#define PAU system("pause")					//暂停 
#define CLS system("cls")					//清屏 
#define NL printf("\n")						//换行 
#define MIN(a,b) ((a)>(b)?(b):(a))			//取最小值 
#define MAX(a,b) ((a)<(b)?(b):(a))			//取最大值 
#define DIS(m,n) nodeArr[MAX(m,n)].distence[MIN(m,n)]	//求m，n之间的距离
#define MLC(n,t) (t*)malloc(sizeof(t)*(n))		//申请n*sizeof(t)个空间 

/*
功能
	读取文件内容到数组 
参数
	<1>文件名（相对路径或绝对路径）
	<2>指向盛放数据数组头指针的指针，该数组的长度是动态的。
返回值：返回读取的节点的个数，若读取失败则返回-1 
举例：
	Data *nodeArr;				//盛放节点的数组头指针 
	load("1.txt",&nodeArr); 	//将1.txt的内容读取到nodeArr中 
*/
int load(const char *fileName,Data **nodeArr)
{
	FILE *fp;
	fp=fopen(fileName,"rt");
	if(fp==NULL)
		return -1;
	int n;
	fscanf(fp,"%d",&n);		//第一个是节点的个数 
	int i;
	char temp[501];	//ifo不能超过500个字符长度	 
	*nodeArr=MLC(n,Data); 
	for(i=0;i<n;i++)		//接下来n个包含：x y ifo 
	{			
		fscanf(fp,"%d %d %s",&(*nodeArr)[i].x,&(*nodeArr)[i].y,temp);
		(*nodeArr)[i].ifo=MLC(strlen(temp)+1,char);
		strcpy((*nodeArr)[i].ifo,temp);
	}
			//邻接矩阵
	int j;
	for(i=0;i<n;i++)
	{
		(*nodeArr)[i].distence=MLC(i+1,int);	//申请左下邻接矩阵的空间 
		for(j=0;j<i+1;j++)
		{
			(*nodeArr)[i].distence[j]=0;		//init
		}
	}
	int a=1,b=1,d;
	for(i=0;;i++)
	{
		fscanf(fp,"%d %d %d",&a,&b,&d);
		if((a||b||d)==0)
			break;				//结束条件为 0 0 0 
		(*nodeArr)[MAX(a,b)].distence[MIN(a,b)]=d;
	}
	return n;
}
/*
	求所有路之间的最短路 
*/
int minDis() 






#ifndef wbt 	//调试代码 
int main()
{
	int n=load("1.txt",&nodeArr);
	int i;
	int j;
	for(i=0;i<n;i++)
	{
		printf("%d %d %s\n",nodeArr[i].x,nodeArr[i].y,nodeArr[i].ifo);
		for(j=0;j<=i;j++)
		{
			printf("%d ",nodeArr[i].distence[j]);
		}
		NL;
	}
}
#endif

