/*
	函数/变量 除了第一个单词外首字母大写。
	宏字母大写
	数据类型名(如 Data)所有单词首字母大写 
*/
typedef struct A		//节点的数据结构，distence包含了已经压缩了的邻接矩阵的结构 
{
	int x,y;
	char *ifo;
	int *distence;		//左下邻接矩阵 
}Data;
Data *nodeArr;			//与宏 DIS 配合
#include<string.h>
#include<stdio.h>
#include<windows.h>
#define PAU system("pause")								//暂停 
#define CLS system("cls")								//清屏 
#define NL printf("\n")									//换行 
#define MIN(a,b) ((a)>(b)?(b):(a))						//取最小值 
#define MAX(a,b) ((a)<(b)?(b):(a))						//取最大值 
#define DIS(m,n) nodeArr[MAX(m,n)].distence[MIN(m,n)]	//求m，n之间的距离
#define MLC(n,t) (t*)malloc(sizeof(t)*(n))				//申请n*sizeof(t)个空间 


/*
	·功能
		读取文件内容到数组 
	·参数
		<1>文件名（相对路径或绝对路径）
		<2>指向盛放数据数组头指针的指针，该数组的长度是动态的。
	·返回值：返回读取的节点的个数，若读取失败则返回-1 
	·举例：
		Data *nodeArr;				//盛放节点的数组头指针 
		load("1.txt",&nodeArr); 	//将1.txt的内容读取到nodeArr中 
*/
int load(const char *fileName,Data **nodeArr)
{
	FILE *fp;
	fp=fopen(fileName,"rt");
	if(fp==NULL)
		return -1;
	int n;
	fscanf(fp,"%d",&n);		//第一个是节点的个数 
	int i;
	char temp[501];	//ifo不能超过500个字符长度	 
	*nodeArr=MLC(n,Data); 
	for(i=0;i<n;i++)		//接下来n个包含：x y ifo 
	{			
		fscanf(fp,"%d %d %s",&(*nodeArr)[i].x,&(*nodeArr)[i].y,temp);
		(*nodeArr)[i].ifo=MLC(strlen(temp)+1,char);
		strcpy((*nodeArr)[i].ifo,temp);
	}
			//邻接矩阵
	int j;
	for(i=0;i<n;i++)
	{
		(*nodeArr)[i].distence=MLC(i+1,int);	//申请左下邻接矩阵的空间 
		for(j=0;j<i+1;j++)
		{
			(*nodeArr)[i].distence[j]=99999;		//init
		}
	}
	int a=1,b=1,d;
	for(i=0;;i++)
	{
		fscanf(fp,"%d %d %d",&a,&b,&d);
		if((a||b||d)==0)
			break;				//结束条件为 0 0 0 
		(*nodeArr)[MAX(a,b)].distence[MIN(a,b)]=d;
	}
	return n;
}


/*
	·功能
		求所有路之间的最短路（包含起点和终点） ,若遇到最短路相同的多个选择，则优先选择路过节点多的路。 
	·参数
		<1>节点数据信息数组， 
		<2>节点个数 
		<3>起点序号 
		<4>终点序号
		<5>存放保存最短路的数组首地址指针。请保证result[]的空间足够大 
		<6>存放result路径里面有多少个节点 
	·返回值
		返回最短路长度，若起点和终点不联通，返回-1
	· 例如
		int rn;
		len=minDis(nodeArr,n,0,2,result,&rn);    结果result表示从0到2最短路，len为最短路径 
*/
int minDis(Data *nodeArr,int v,int a,int b,int result[],int *rn)
{
	typedef struct
	{
		int n;
		int father;
		int value;
	}Latest;
	int i,j;
	char *temp=MLC(v,char);	//记录点是否入队。 
	for(i=0;i<v;i++)
	{
		temp[i]=0;							//init
	}
	temp[a]=1;
	int *line=MLC(v,int);
	int lp=0;	//记录了队列长度 
	line[0]=a;
	Latest *time=MLC(v,Latest);
	for(i=0;i<v;i++)
	{
		time[i].n=0;
		time[i].value=99999;				//init
	}
	time[a].value=0;
	int flag=1;
	if(a==b)	 
	{
		result[0]=a;						//init
		return 0;
	}
	for(j=0;(j<v-1)&&j<=lp;j++)		//j为扫描指针，lp为队列指针最大值
	{
		for(i=0;i<v;i++)
		{
			if(temp[i]==0 && DIS(line[j],i))	//若没有被入队 且 line[lp]到i有路，则i入队 
			{
				++lp;
				line[lp]=i;	//入队 
				temp[i]=1;		//记录下本点已经入队
				if(i==b)
				{
					flag=0;
				}
			}
		}
	}
	if(flag)	//a和b不连通 
	{
		return -1;
	}
	//按照已经排序好的顺序扫描最短路。 
	for(j=0;j<=lp;j++)	//j为队列扫描指针 
	{
		for(i=0;i<v;i++)
		{
			if(DIS(line[j],i))
			{
				if(time[line[i]].value>=time[line[j]].value+DIS(line[j],i))
				{
					time[line[i]].value=time[line[j]].value+DIS(line[j],i);
					time[line[i]].father=j;
					time[line[i]].n=time[line[j]].n+1;
				}
			}
		}
	}
	j=b;
	for(i=time[b].n;i>=0;i--)
	{
		result[i]=j;
		j=time[j].father;
	}
	result[0]=a;
	*rn=time[b].n+1;
	return time[b].value;
} 






#ifndef wbt 	//调试代码，不用删掉 
int main()
{
	printf("\n***=================以下为调试输出：================***\n");
	int n=load("1.txt",&nodeArr);
	int i;
	int j;
	for(i=0;i<n;i++)
	{
		printf("%d %d %s\ndistence：",nodeArr[i].x,nodeArr[i].y,nodeArr[i].ifo);
		for(j=0;j<=i;j++)
		{
			printf("%d ",nodeArr[i].distence[j]);
		}
		NL;
	}
	int result[100];
	int rn; 
	i=minDis(nodeArr,n,0,2,result,&rn);
	printf("len=%d\n",i);
	for(j=0;j<rn;j++)
	{
		printf("%d ",result[j]);
	 } 
	printf("\n***=================以上为调试输出：================***\n");
}
#endif

